//========= Copyright © 1996-2005, Valve Corporation, All rights reserved. ============//
//
// Purpose: 
//
//=============================================================================//

#include "cbase.h"
#include "weapon_valangard.h"

IMPLEMENT_NETWORKCLASS_ALIASED( WeaponValangard, DT_WeaponValangard )

BEGIN_NETWORK_TABLE( CWeaponValangard, DT_WeaponValangard )
END_NETWORK_TABLE()

BEGIN_PREDICTION_DATA( CWeaponValangard )
END_PREDICTION_DATA()

LINK_ENTITY_TO_CLASS( weapon_valangard, CWeaponValangard );
PRECACHE_WEAPON_REGISTER( weapon_valangard );

acttable_t CWeaponValangard::s_CommonActions[] = 
{
	{ ACT_CF_EXECUTE_ANYTHING,			ACT_CF_EXECUTE_UNARMED_UNARMED,			false },
	{ ACT_CF_EXECUTED_ANYTHING,			ACT_CF_EXECUTED_UNARMED_UNARMED,		false },
	{ ACT_CF_LATCH_JUMP_START,			ACT_CF_LATCH_JUMP_START_VALANGARD,		false },
	{ ACT_CF_LATCH_LEFT,				ACT_CF_LATCH_LEFT_VALANGARD,			false },
	{ ACT_CF_LATCH_LEFT_CHARGE,			ACT_CF_LATCH_LEFT_CHARGE_VALANGARD,		false },
	{ ACT_CF_LATCH_LEFT_WEAK_ATTACK,	ACT_CF_LATCH_LEFT_WEAK_ATTACK_VALANGARD,false },
	{ ACT_CF_LATCH_LEFT_STRONG_ATTACK,	ACT_CF_LATCH_LEFT_STRONG_ATTACK_VALANGARD,false },
	{ ACT_CF_LATCH_RIGHT,				ACT_CF_LATCH_RIGHT_VALANGARD,			false },
	{ ACT_CF_LATCH_RIGHT_CHARGE,		ACT_CF_LATCH_RIGHT_CHARGE_VALANGARD,	false },
	{ ACT_CF_LATCH_RIGHT_WEAK_ATTACK,	ACT_CF_LATCH_RIGHT_WEAK_ATTACK_VALANGARD,false },
	{ ACT_CF_LATCH_RIGHT_STRONG_ATTACK,	ACT_CF_LATCH_RIGHT_STRONG_ATTACK_VALANGARD,false },
	{ ACT_CF_LATCH_BACK,				ACT_CF_LATCH_BACK_VALANGARD,			false },
	{ ACT_CF_LATCH_BACK_CHARGE,			ACT_CF_LATCH_BACK_CHARGE_VALANGARD,		false },
	{ ACT_CF_LATCH_BACK_WEAK_ATTACK,	ACT_CF_LATCH_BACK_WEAK_ATTACK_VALANGARD,false },
	{ ACT_CF_LATCH_BACK_STRONG_ATTACK,	ACT_CF_LATCH_BACK_STRONG_ATTACK_VALANGARD,false },

	{ ACT_CF_IDLE_NUMEN_ACTIVE,					ACT_CF_IDLE_VALANGARD_NUMEN,				false },
	{ ACT_CF_RUN_NUMEN_ACTIVE,					ACT_CF_RUN_VALANGARD_NUMEN,					false },
	{ ACT_CF_CHARGEUP_NUMEN_ACTIVE,				ACT_CF_CHARGEUP_VALANGARD_NUMEN,			false },
	{ ACT_CF_CAST_NUMEN_ACTIVE,					ACT_CF_CAST_VALANGARD_NUMEN,				false },
	{ ACT_CF_IDLE_NUMEN_ACTIVE,					ACT_CF_IDLE_VALANGARD_NUMEN,				false },
	{ ACT_CF_RUN_NUMEN_ACTIVE,					ACT_CF_RUN_VALANGARD_NUMEN,					false },
	{ ACT_CF_JUMP_START_NUMEN_ACTIVE,			ACT_CF_JUMP_START_VALANGARD_NUMEN,			false },
	{ ACT_CF_JUMP_FLOAT_NUMEN_ACTIVE,			ACT_CF_JUMP_FLOAT_VALANGARD_NUMEN,			false },
	{ ACT_CF_JUMP_LAND_NUMEN_ACTIVE,			ACT_CF_JUMP_LAND_VALANGARD_NUMEN,			false },
	{ ACT_CF_POWERJUMP_FORWARD_NUMEN_ACTIVE,	ACT_CF_POWERJUMP_FORWARD_VALANGARD_NUMEN,	false },
	{ ACT_CF_POWERJUMP_UP_NUMEN_ACTIVE,			ACT_CF_POWERJUMP_UP_VALANGARD_NUMEN,		false },
	{ ACT_CF_POWERJUMP_BACK_NUMEN_ACTIVE,		ACT_CF_POWERJUMP_BACK_VALANGARD_NUMEN,		false },
	{ ACT_CF_POWERJUMP_LEFT_NUMEN_ACTIVE,		ACT_CF_POWERJUMP_LEFT_VALANGARD_NUMEN,		false },
	{ ACT_CF_POWERJUMP_RIGHT_NUMEN_ACTIVE,		ACT_CF_POWERJUMP_RIGHT_VALANGARD_NUMEN,		false },
	{ ACT_CF_JUMP_START_NUMEN_ACTIVE,			ACT_CF_JUMP_START_VALANGARD_NUMEN,			false },
	{ ACT_CF_LATCH_LEFT_NUMEN_ACTIVE,			ACT_CF_LATCH_LEFT_VALANGARD_NUMEN,			false },
	{ ACT_CF_LATCH_LEFT_CHARGEUP_NUMEN_ACTIVE,	ACT_CF_LATCH_LEFT_CHARGEUP_VALANGARD_NUMEN,	false },
	{ ACT_CF_LATCH_LEFT_CAST_NUMEN_ACTIVE,		ACT_CF_LATCH_LEFT_CAST_VALANGARD_NUMEN,		false },
	{ ACT_CF_LATCH_RIGHT_NUMEN_ACTIVE,			ACT_CF_LATCH_RIGHT_VALANGARD_NUMEN,			false },
	{ ACT_CF_LATCH_RIGHT_CHARGEUP_NUMEN_ACTIVE,	ACT_CF_LATCH_RIGHT_CHARGEUP_VALANGARD_NUMEN,false },
	{ ACT_CF_LATCH_RIGHT_CAST_NUMEN_ACTIVE,		ACT_CF_LATCH_RIGHT_CAST_VALANGARD_NUMEN,	false },
	{ ACT_CF_LATCH_BACK_NUMEN_ACTIVE,			ACT_CF_LATCH_BACK_VALANGARD_NUMEN,			false },
	{ ACT_CF_LATCH_BACK_CHARGEUP_NUMEN_ACTIVE,	ACT_CF_LATCH_BACK_CHARGEUP_VALANGARD_NUMEN,	false },
	{ ACT_CF_LATCH_BACK_CAST_NUMEN_ACTIVE,		ACT_CF_LATCH_BACK_CAST_VALANGARD_NUMEN,		false },
};

acttable_t CWeaponValangard::s_BusterActions[] = 
{
	{ ACT_MP_RUN,						ACT_CF_RUN_VALANGARD,					false },
	{ ACT_MP_STAND_IDLE,				ACT_CF_IDLE_VALANGARD,					false },
	{ ACT_MP_CROUCH_IDLE,				ACT_CF_IDLE_CROUCH_VALANGARD,			false },
	{ ACT_MP_CROUCHWALK,				ACT_CF_WALK_CROUCH_VALANGARD,			false },
	{ ACT_CF_CHARGE,					ACT_CF_CHARGE_VALANGARD,				false },
	{ ACT_CF_WEAK_ATTACK,				ACT_CF_WEAK_ATTACK_VALANGARD,			false },
	{ ACT_CF_STRONG_ATTACK,				ACT_CF_STRONG_ATTACK_VALANGARD,			false },
	{ ACT_CF_C_ATTACK,					ACT_CF_C_ATTACK_VALANGARD,				false },
	{ ACT_CF_BLOCK,						ACT_CF_BLOCK_VALANGARD,					false },
	{ ACT_CF_BLOCKED,					ACT_CF_BLOCKED_VALANGARD,				false },
	{ ACT_CF_DFA_READY,					ACT_CF_DFA_READY_VALANGARD,				false },
	{ ACT_CF_DFA_ATTACK,				ACT_CF_DFA_ATTACK_VALANGARD,			false },
	{ ACT_MP_JUMP_START,				ACT_CF_JUMP_START_VALANGARD,			false },
	{ ACT_MP_JUMP_FLOAT,				ACT_CF_JUMP_FLOAT_VALANGARD,			false },
	{ ACT_MP_JUMP_LAND,					ACT_CF_JUMP_LAND_VALANGARD,				false },
	{ ACT_CF_POWERJUMP_FORWARD,			ACT_CF_POWERJUMP_FORWARD_VALANGARD,		false },
	{ ACT_CF_POWERJUMP_UP,				ACT_CF_POWERJUMP_UP_VALANGARD,			false },
	{ ACT_CF_POWERJUMP_LEFT,			ACT_CF_POWERJUMP_LEFT_VALANGARD,		false },
	{ ACT_CF_POWERJUMP_RIGHT,			ACT_CF_POWERJUMP_RIGHT_VALANGARD,		false },
	{ ACT_CF_POWERJUMP_BACK,			ACT_CF_POWERJUMP_BACK_VALANGARD,		false },
};

acttable_t *CWeaponValangard::ActivityList( CFWeaponType eSecondary, bool bCommon )
{
	return ActivityListStatic(eSecondary, bCommon);
}

int CWeaponValangard::ActivityListCount( CFWeaponType eSecondary, bool bCommon )
{
	return ActivityListCountStatic(eSecondary, bCommon);
}

acttable_t *CWeaponValangard::ActivityListStatic( CFWeaponType eSecondary, bool bCommon )
{
	if (bCommon)
		return s_CommonActions;

	return s_BusterActions;
}

int CWeaponValangard::ActivityListCountStatic( CFWeaponType eSecondary, bool bCommon )
{
	if (bCommon)
		return ARRAYSIZE(s_CommonActions);

	return ARRAYSIZE(s_BusterActions);
}

CWeaponValangard::CWeaponValangard()
{
}

void CWeaponValangard::PrimaryAttack()
{
#if !defined(ARCON_DEMO)
	BaseClass::PrimaryAttack();
#endif
}